/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __SHELL_DBUS_INTERFACE_H__
#define __SHELL_DBUS_INTERFACE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.Shell.Extensions */

#define SHELL_TYPE_EXTENSIONS (shell_extensions_get_type ())
#define SHELL_EXTENSIONS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), SHELL_TYPE_EXTENSIONS, ShellExtensions))
#define SHELL_IS_EXTENSIONS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), SHELL_TYPE_EXTENSIONS))
#define SHELL_EXTENSIONS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), SHELL_TYPE_EXTENSIONS, ShellExtensionsIface))

struct _ShellExtensions;
typedef struct _ShellExtensions ShellExtensions;
typedef struct _ShellExtensionsIface ShellExtensionsIface;

struct _ShellExtensionsIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_check_for_updates) (
    ShellExtensions *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_disable_extension) (
    ShellExtensions *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid);

  gboolean (*handle_enable_extension) (
    ShellExtensions *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid);

  gboolean (*handle_get_extension_errors) (
    ShellExtensions *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid);

  gboolean (*handle_get_extension_info) (
    ShellExtensions *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid);

  gboolean (*handle_install_remote_extension) (
    ShellExtensions *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid);

  gboolean (*handle_launch_extension_prefs) (
    ShellExtensions *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid);

  gboolean (*handle_list_extensions) (
    ShellExtensions *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_open_extension_prefs) (
    ShellExtensions *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid,
    const gchar *arg_parent_window,
    GVariant *arg_options);

  gboolean (*handle_reload_extension) (
    ShellExtensions *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid);

  gboolean (*handle_uninstall_extension) (
    ShellExtensions *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid);

  const gchar * (*get_shell_version) (ShellExtensions *object);

  gboolean  (*get_user_extensions_enabled) (ShellExtensions *object);

  void (*extension_state_changed) (
    ShellExtensions *object,
    const gchar *arg_uuid,
    GVariant *arg_state);

  void (*extension_status_changed) (
    ShellExtensions *object,
    const gchar *arg_uuid,
    gint arg_state,
    const gchar *arg_error);

};

GType shell_extensions_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *shell_extensions_interface_info (void);
guint shell_extensions_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void shell_extensions_complete_list_extensions (
    ShellExtensions *object,
    GDBusMethodInvocation *invocation,
    GVariant *extensions);

void shell_extensions_complete_get_extension_info (
    ShellExtensions *object,
    GDBusMethodInvocation *invocation,
    GVariant *info);

void shell_extensions_complete_get_extension_errors (
    ShellExtensions *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *errors);

void shell_extensions_complete_install_remote_extension (
    ShellExtensions *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void shell_extensions_complete_uninstall_extension (
    ShellExtensions *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void shell_extensions_complete_reload_extension (
    ShellExtensions *object,
    GDBusMethodInvocation *invocation);

void shell_extensions_complete_enable_extension (
    ShellExtensions *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void shell_extensions_complete_disable_extension (
    ShellExtensions *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void shell_extensions_complete_launch_extension_prefs (
    ShellExtensions *object,
    GDBusMethodInvocation *invocation);

void shell_extensions_complete_open_extension_prefs (
    ShellExtensions *object,
    GDBusMethodInvocation *invocation);

void shell_extensions_complete_check_for_updates (
    ShellExtensions *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void shell_extensions_emit_extension_state_changed (
    ShellExtensions *object,
    const gchar *arg_uuid,
    GVariant *arg_state);

void shell_extensions_emit_extension_status_changed (
    ShellExtensions *object,
    const gchar *arg_uuid,
    gint arg_state,
    const gchar *arg_error);



/* D-Bus method calls: */
void shell_extensions_call_list_extensions (
    ShellExtensions *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shell_extensions_call_list_extensions_finish (
    ShellExtensions *proxy,
    GVariant **out_extensions,
    GAsyncResult *res,
    GError **error);

gboolean shell_extensions_call_list_extensions_sync (
    ShellExtensions *proxy,
    GVariant **out_extensions,
    GCancellable *cancellable,
    GError **error);

void shell_extensions_call_get_extension_info (
    ShellExtensions *proxy,
    const gchar *arg_uuid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shell_extensions_call_get_extension_info_finish (
    ShellExtensions *proxy,
    GVariant **out_info,
    GAsyncResult *res,
    GError **error);

gboolean shell_extensions_call_get_extension_info_sync (
    ShellExtensions *proxy,
    const gchar *arg_uuid,
    GVariant **out_info,
    GCancellable *cancellable,
    GError **error);

void shell_extensions_call_get_extension_errors (
    ShellExtensions *proxy,
    const gchar *arg_uuid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shell_extensions_call_get_extension_errors_finish (
    ShellExtensions *proxy,
    gchar ***out_errors,
    GAsyncResult *res,
    GError **error);

gboolean shell_extensions_call_get_extension_errors_sync (
    ShellExtensions *proxy,
    const gchar *arg_uuid,
    gchar ***out_errors,
    GCancellable *cancellable,
    GError **error);

void shell_extensions_call_install_remote_extension (
    ShellExtensions *proxy,
    const gchar *arg_uuid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shell_extensions_call_install_remote_extension_finish (
    ShellExtensions *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean shell_extensions_call_install_remote_extension_sync (
    ShellExtensions *proxy,
    const gchar *arg_uuid,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void shell_extensions_call_uninstall_extension (
    ShellExtensions *proxy,
    const gchar *arg_uuid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shell_extensions_call_uninstall_extension_finish (
    ShellExtensions *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean shell_extensions_call_uninstall_extension_sync (
    ShellExtensions *proxy,
    const gchar *arg_uuid,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void shell_extensions_call_reload_extension (
    ShellExtensions *proxy,
    const gchar *arg_uuid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shell_extensions_call_reload_extension_finish (
    ShellExtensions *proxy,
    GAsyncResult *res,
    GError **error);

gboolean shell_extensions_call_reload_extension_sync (
    ShellExtensions *proxy,
    const gchar *arg_uuid,
    GCancellable *cancellable,
    GError **error);

void shell_extensions_call_enable_extension (
    ShellExtensions *proxy,
    const gchar *arg_uuid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shell_extensions_call_enable_extension_finish (
    ShellExtensions *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean shell_extensions_call_enable_extension_sync (
    ShellExtensions *proxy,
    const gchar *arg_uuid,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void shell_extensions_call_disable_extension (
    ShellExtensions *proxy,
    const gchar *arg_uuid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shell_extensions_call_disable_extension_finish (
    ShellExtensions *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean shell_extensions_call_disable_extension_sync (
    ShellExtensions *proxy,
    const gchar *arg_uuid,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void shell_extensions_call_launch_extension_prefs (
    ShellExtensions *proxy,
    const gchar *arg_uuid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shell_extensions_call_launch_extension_prefs_finish (
    ShellExtensions *proxy,
    GAsyncResult *res,
    GError **error);

gboolean shell_extensions_call_launch_extension_prefs_sync (
    ShellExtensions *proxy,
    const gchar *arg_uuid,
    GCancellable *cancellable,
    GError **error);

void shell_extensions_call_open_extension_prefs (
    ShellExtensions *proxy,
    const gchar *arg_uuid,
    const gchar *arg_parent_window,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shell_extensions_call_open_extension_prefs_finish (
    ShellExtensions *proxy,
    GAsyncResult *res,
    GError **error);

gboolean shell_extensions_call_open_extension_prefs_sync (
    ShellExtensions *proxy,
    const gchar *arg_uuid,
    const gchar *arg_parent_window,
    GVariant *arg_options,
    GCancellable *cancellable,
    GError **error);

void shell_extensions_call_check_for_updates (
    ShellExtensions *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shell_extensions_call_check_for_updates_finish (
    ShellExtensions *proxy,
    GAsyncResult *res,
    GError **error);

gboolean shell_extensions_call_check_for_updates_sync (
    ShellExtensions *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *shell_extensions_get_shell_version (ShellExtensions *object);
gchar *shell_extensions_dup_shell_version (ShellExtensions *object);
void shell_extensions_set_shell_version (ShellExtensions *object, const gchar *value);

gboolean shell_extensions_get_user_extensions_enabled (ShellExtensions *object);
void shell_extensions_set_user_extensions_enabled (ShellExtensions *object, gboolean value);


/* ---- */

#define SHELL_TYPE_EXTENSIONS_PROXY (shell_extensions_proxy_get_type ())
#define SHELL_EXTENSIONS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), SHELL_TYPE_EXTENSIONS_PROXY, ShellExtensionsProxy))
#define SHELL_EXTENSIONS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), SHELL_TYPE_EXTENSIONS_PROXY, ShellExtensionsProxyClass))
#define SHELL_EXTENSIONS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), SHELL_TYPE_EXTENSIONS_PROXY, ShellExtensionsProxyClass))
#define SHELL_IS_EXTENSIONS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), SHELL_TYPE_EXTENSIONS_PROXY))
#define SHELL_IS_EXTENSIONS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), SHELL_TYPE_EXTENSIONS_PROXY))

typedef struct _ShellExtensionsProxy ShellExtensionsProxy;
typedef struct _ShellExtensionsProxyClass ShellExtensionsProxyClass;
typedef struct _ShellExtensionsProxyPrivate ShellExtensionsProxyPrivate;

struct _ShellExtensionsProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ShellExtensionsProxyPrivate *priv;
};

struct _ShellExtensionsProxyClass
{
  GDBusProxyClass parent_class;
};

GType shell_extensions_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ShellExtensionsProxy, g_object_unref)
#endif

void shell_extensions_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ShellExtensions *shell_extensions_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ShellExtensions *shell_extensions_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void shell_extensions_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ShellExtensions *shell_extensions_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ShellExtensions *shell_extensions_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define SHELL_TYPE_EXTENSIONS_SKELETON (shell_extensions_skeleton_get_type ())
#define SHELL_EXTENSIONS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), SHELL_TYPE_EXTENSIONS_SKELETON, ShellExtensionsSkeleton))
#define SHELL_EXTENSIONS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), SHELL_TYPE_EXTENSIONS_SKELETON, ShellExtensionsSkeletonClass))
#define SHELL_EXTENSIONS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), SHELL_TYPE_EXTENSIONS_SKELETON, ShellExtensionsSkeletonClass))
#define SHELL_IS_EXTENSIONS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), SHELL_TYPE_EXTENSIONS_SKELETON))
#define SHELL_IS_EXTENSIONS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), SHELL_TYPE_EXTENSIONS_SKELETON))

typedef struct _ShellExtensionsSkeleton ShellExtensionsSkeleton;
typedef struct _ShellExtensionsSkeletonClass ShellExtensionsSkeletonClass;
typedef struct _ShellExtensionsSkeletonPrivate ShellExtensionsSkeletonPrivate;

struct _ShellExtensionsSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ShellExtensionsSkeletonPrivate *priv;
};

struct _ShellExtensionsSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType shell_extensions_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ShellExtensionsSkeleton, g_object_unref)
#endif

ShellExtensions *shell_extensions_skeleton_new (void);


/* ---- */

#define SHELL_TYPE_OBJECT (shell_object_get_type ())
#define SHELL_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), SHELL_TYPE_OBJECT, ShellObject))
#define SHELL_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), SHELL_TYPE_OBJECT))
#define SHELL_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), SHELL_TYPE_OBJECT, ShellObject))

struct _ShellObject;
typedef struct _ShellObject ShellObject;
typedef struct _ShellObjectIface ShellObjectIface;

struct _ShellObjectIface
{
  GTypeInterface parent_iface;
};

GType shell_object_get_type (void) G_GNUC_CONST;

ShellExtensions *shell_object_get_extensions (ShellObject *object);
ShellExtensions *shell_object_peek_extensions (ShellObject *object);

#define SHELL_TYPE_OBJECT_PROXY (shell_object_proxy_get_type ())
#define SHELL_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), SHELL_TYPE_OBJECT_PROXY, ShellObjectProxy))
#define SHELL_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), SHELL_TYPE_OBJECT_PROXY, ShellObjectProxyClass))
#define SHELL_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), SHELL_TYPE_OBJECT_PROXY, ShellObjectProxyClass))
#define SHELL_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), SHELL_TYPE_OBJECT_PROXY))
#define SHELL_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), SHELL_TYPE_OBJECT_PROXY))

typedef struct _ShellObjectProxy ShellObjectProxy;
typedef struct _ShellObjectProxyClass ShellObjectProxyClass;
typedef struct _ShellObjectProxyPrivate ShellObjectProxyPrivate;

struct _ShellObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  ShellObjectProxyPrivate *priv;
};

struct _ShellObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType shell_object_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ShellObjectProxy, g_object_unref)
#endif

ShellObjectProxy *shell_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define SHELL_TYPE_OBJECT_SKELETON (shell_object_skeleton_get_type ())
#define SHELL_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), SHELL_TYPE_OBJECT_SKELETON, ShellObjectSkeleton))
#define SHELL_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), SHELL_TYPE_OBJECT_SKELETON, ShellObjectSkeletonClass))
#define SHELL_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), SHELL_TYPE_OBJECT_SKELETON, ShellObjectSkeletonClass))
#define SHELL_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), SHELL_TYPE_OBJECT_SKELETON))
#define SHELL_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), SHELL_TYPE_OBJECT_SKELETON))

typedef struct _ShellObjectSkeleton ShellObjectSkeleton;
typedef struct _ShellObjectSkeletonClass ShellObjectSkeletonClass;
typedef struct _ShellObjectSkeletonPrivate ShellObjectSkeletonPrivate;

struct _ShellObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  ShellObjectSkeletonPrivate *priv;
};

struct _ShellObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType shell_object_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ShellObjectSkeleton, g_object_unref)
#endif

ShellObjectSkeleton *shell_object_skeleton_new (const gchar *object_path);
void shell_object_skeleton_set_extensions (ShellObjectSkeleton *object, ShellExtensions *interface_);

/* ---- */

#define SHELL_TYPE_OBJECT_MANAGER_CLIENT (shell_object_manager_client_get_type ())
#define SHELL_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), SHELL_TYPE_OBJECT_MANAGER_CLIENT, ShellObjectManagerClient))
#define SHELL_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), SHELL_TYPE_OBJECT_MANAGER_CLIENT, ShellObjectManagerClientClass))
#define SHELL_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), SHELL_TYPE_OBJECT_MANAGER_CLIENT, ShellObjectManagerClientClass))
#define SHELL_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), SHELL_TYPE_OBJECT_MANAGER_CLIENT))
#define SHELL_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), SHELL_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _ShellObjectManagerClient ShellObjectManagerClient;
typedef struct _ShellObjectManagerClientClass ShellObjectManagerClientClass;
typedef struct _ShellObjectManagerClientPrivate ShellObjectManagerClientPrivate;

struct _ShellObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  ShellObjectManagerClientPrivate *priv;
};

struct _ShellObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ShellObjectManagerClient, g_object_unref)
#endif

GType shell_object_manager_client_get_type (void) G_GNUC_CONST;

GType shell_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void shell_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *shell_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *shell_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void shell_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *shell_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *shell_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __SHELL_DBUS_INTERFACE_H__ */
